BiocManager::install("topGO")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
source("https://bioconductor.org/biocLite.R")
biocLite("topGO")
biocLite("topGO")
library(topGO)
library(GO.db)
library(biomaRt)
BiocManager::install("biomaRt")
library(Rgraphviz)
BiocManager::install("Rgraphvitz")
library(biomaRt)
library(Rgraphviz)
BiocManager::install("Rgraphvitz")
library(Rgraphviz)
install.packages(Rgraphwitz)
install.packages(Rgraphviz)
install.packages("Rgraphviz")
R --version
R.version
R --version
R --version
files <- list.files(path="C:/Users/norab/Master/Data/test_data/test_fakeTrees", pattern=".*_align_.*", full.names=TRUE, recursive=FALSE)
file <- list(file)
tree <- read.tree(file)
file <- list(files)
tree <- read.tree(file)
library(ape)
tree <- read.tree(file)
files <- list.files(path="C:/Users/norab/Master/Data/test_data/test_fakeTrees", pattern=".*_align_.*", full.names=TRUE, recursive=FALSE)
treeDistVals <- sapply(file, calcAndSave)
calcAndSave <- function(file) {
tree<-read.tree(file)
if(is.null(tree)) {
return(NULL)
} else {
pairDist <- cophenetic(tree)
path <- "C:/Users/norab/Master/Data/real_tree_data/cophenetic_dists/"
name <-  gsub("^.*ninja_trees/", "", file)
name <- gsub("_HUMAN__full_aln.tre$", "", name)
filename <- paste0(path, name)
filename <- paste0(filename, "___CopD.csv")
write.csv(pairDist, file=filename, row.names=TRUE, col.names=TRUE, sep = ",", quote = F)
}
}
treeDistVals <- sapply(file, calcAndSave)
treeDistVals <- sapply(files, calcAndSave)
tree <- read.tree(file)
file <- list(file)
files <- list.files(path="C:/Users/norab/Master/Data/test_data/test_fakeTrees", pattern=".*_align_.*", full.names=TRUE, recursive=FALSE)
file <- list(file)
tree <- read.tree(file)
tree <- read.tree("C:/Users/norab/Master/Data/test_data/test_fakeTrees/test_align_2supx2subX4samples.tre")
pairDist <- cophenetic(tree)
nrow(pairDist)
write.csv(pairDist, file="test_align_2supx2subX4samples___CopD.csv", row.names=TRUE, col.names=TRUE, sep = ",", quote = F)
tree <- read.tree("C:/Users/norab/Master/Data/test_data/test_fakeTrees/test_align_5supx26subX52samples.tre")
pairDist <- cophenetic(tree)
nrow(pairDist)
write.csv(pairDist, file="test_align_5supx26subX52samples___CopD.csv", row.names=TRUE, col.names=TRUE, sep = ",", quote = F)
prob = 0.05
var_p = prob * (1 - prob)
num_perm_samples = 1000      # 70 = empirical p val = 0.1
var_p_n = var_p / num_perm_samples
sd_p_n = sqrt(var_p_n)
# 0.025 quantile
max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
prob + 1.96 * sd_p_n
prob = 0.05
var_p = prob * (1 - prob)
num_perm_samples = 100      # 70 = empirical p val = 0.1
var_p_n = var_p / num_perm_samples
sd_p_n = sqrt(var_p_n)
# 0.025 quantile
max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
prob + 1.96 * sd_p_n
# 0.025 quantile
low_q = max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
high_q = prob + 1.96 * sd_p_n
print([low_q, high_q])
print(low_q, high_q)
print(low_q)
print(high_q)
print(low_q)
print(high_q)
print(low_q)
print(high_q)
num_perm_samples = 150      # 70 = empirical p val = 0.1
prob = 0.05
var_p = prob * (1 - prob)
num_perm_samples = 150      # 70 = empirical p val = 0.1
var_p_n = var_p / num_perm_samples
sd_p_n = sqrt(var_p_n)
# 0.025 quantile
low_q = max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
high_q = prob + 1.96 * sd_p_n
print(low_q)
print(high_q)
print(low_q)
print(high_q)
prob = 0.05
var_p = prob * (1 - prob)
num_perm_samples = 1000      # 70 = empirical p val = 0.1
var_p_n = var_p / num_perm_samples
sd_p_n = sqrt(var_p_n)
# 0.025 quantile
low_q = max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
high_q = prob + 1.96 * sd_p_n
print(low_q)
print(high_q)
prob = 0.05
var_p = prob * (1 - prob)
num_perm_samples = 100      # 70 = empirical p val = 0.1
var_p_n = var_p / num_perm_samples
sd_p_n = sqrt(var_p_n)
# 0.025 quantile
low_q = max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
high_q = prob + 1.96 * sd_p_n
print(low_q)
print(high_q)
# Example:
X = rnorm(100) # X is a sample of 100 normally distributed random variables
type(X)
dtype(X)
X
# Example:
X = rnorm(100) # X is a sample of 100 normally distributed random variables
P = ecdf(X)    # P is a function giving the empirical CDF of X
P(0.0)         # This returns the empirical CDF at zero (should be close to 0.5)
# Example:
X = rnorm(100) # X is a sample of 100 normally distributed random variables
P = ecdf(X)    # P is a function giving the empirical CDF of X
P(0.0)         # This returns the empirical CDF at zero (should be close to 0.5)
plot(P)        # Draws a plot of the empirical CDF (see below)
P(-1)         # This returns the empirical CDF at zero (should be close to 0.5)
plot(P)        # Draws a plot of the empirical CDF (see below)
setwd("C:/Users/norab/Master/WillowProject/R_scripts")
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullSub_allGenes_22.07.2021.csv")
View(SDRnull_all_super)
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullSub_allGenes_22.07.2021.csv", header = FALSE)
View(SDRnull_all_super)
colnames(SDRnull_all_super) <- c("gene", "SDRnull")
View(SDRnull_all_super)
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullSuper_allGenes_22.07.2021.csv", header = FALSE)
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullSub_allGenes_22.07.2021.csv", header = FALSE)
colnames(SDRnull_all_super) <- c("gene", "SDRnull")
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullSuper_allGenes_22.07.2021.csv", header = FALSE)
SDRnull_all_sub <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullSub_allGenes_22.07.2021.csv", header = FALSE)
colnames(SDRnull_all_super) <- c("gene", "SDRnull")
colnames(SDRnull_all_sub) <- c("gene", "SDRnull")
View(SDRnull_all_sub)
View(SDRnull_all_super)
# Read list of relevant genes
SDRnull_genes <- read.csv("C:/Users/norab/Master/data/SDRnull/other/SDRnull_genes.csv", header = FALSE)
colnames(SDRnull_genes) <- c("gene")
View(SDRnull_genes)
View(SDRnull_genes)
# Read list of relevant genes
SDRnull_genes <- read.csv("C:/Users/norab/Master/data/SDRnull/other/SDRnull_genes_selection.csv", header = FALSE)
# Read list of relevant genes
SDRnull_genes <- read.csv("C:/Users/norab/Master/data/SDRnull/other/SDRnull_gene_selection.csv", header = FALSE)
colnames(SDRnull_genes) <- c("gene")
View(SDRnull_genes)
View(SDRnull_all_sub)
# Initiate matrix of genes
table(SDRnull_all_super['gene'])
# Initiate matrix of genes
gene_nr <- table(SDRnull_all_super['gene'])
max(gene_nr)
# Read all SDRnull data
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSuper_22.07.2021.csv", header = FALSE)
# Read all SDRnull data
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSuper_22.07.21.csv", header = FALSE)
SDRnull_all_sub <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSub_22.07.21.csv", header = FALSE)
colnames(SDRnull_all_super) <- c("gene", "SDRnull")
colnames(SDRnull_all_sub) <- c("gene", "SDRnull")
View(SDRnull_all_sub)
# Read all SDRnull data
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSuper_22.07.21.csv")
View(SDRnull_all_super)
# Read all SDRnull data
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSuper_22.07.21.csv")
SDRnull_all_sub <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSub_22.07.21.csv")
View(SDRnull_all_sub)
# Initiate matrix of genes
gene_nr <- table(SDRnull_all_super['gene'])
max(gene_nr)
View(SDRnull_genes)
# Read list of relevant genes
SDRnull_genes <- read.csv("C:/Users/norab/Master/data/SDRnull/other/SDRnull_gene_selection.csv", header = TRUE)
View(SDRnull_genes)
colnames(SDRnull_genes) <- c("gene")
View(SDRnull_genes)
View(SDRnull_genes)
SDRnull_total <- as.vector(SDRnull_genes)
View(SDRnull_total)
SDRnull_total_selection <- SDRnull_all_super[SDRnull_all_super$gene %in% SDRnull_genes]
View(SDRnull_total_selection)
SDRnull_total_selection <- SDRnull_all_super[SDRnull_all_super$gene %in% SDRnull_total]
SDRnull_all_super$gene
SDRnull_all_super$gene %in% SDRnull_total
names(SDRnull_all_super$gene)
genes_super <- SDRnull_all_super$gene
all_genes_vector <- SDRnull_all_sub['gene']
all_genes_vector <- SDRnull_all_sub['gene'][0:10]
all_genes_vector <- SDRnull_all_sub['gene']
all_genes_vector <- all_genes_vector[0:10]
all_genes_vector <- as.vector(SDRnull_all_sub['gene'])
all_genes_vector <- all_genes_vector[0:10]
View(all_genes_vector)
all_genes_vector <- all_genes_vector[0:10, 0:1]
gene_selection_df <- SDRnull_genes[0:10, 0:1]
gene_selection_df
gene_selection_vector <- SDRnull_genes[0:10, 0:1]
all_genes <- SDRnull_all_sub['gene']
all_genes <- all_genes[0:10, 0:1]
gene_selection_vector
all_genes <- SDRnull_all_sub[0:10, 0:1]
all_genes <- SDRnull_all_sub[0:10, 0:1]
View(SDRnull_all_super)
all_genes <- SDRnull_all_sub[0:10, 0:2]
View(all_genes)
gene_selection_vector <- SDRnull_genes[0:9, 0:1]
gene_selection_vector[10] <- "ENSG00000075643___MOCOS"
gene_selection_vector
all_genes['gene'] %in% gene_selection_vector
intersect(all_genes['gene'], gene_selection_vector)
all_genes['gene']
gene_selection_vector
as.vector(all_genes['gene']) %in% gene_selection_vector
intersect(as.vector(all_genes['gene']), gene_selection_vector)
intersect(c(all_genes['gene']), c(gene_selection_vector))
View(all_genes)
gene_selection_vector
intersect(c(all_genes$gene), c(gene_selection_vector))
intersect(all_genes$gene, gene_selection_vector)
View(SDRnull_all_super)
SDRnull_selection_super <- interSDRnull_all_super[SDRnull_genes, ]
SDRnull_selection_super <- SDRnull_all_super[SDRnull_genes, ]
View(SDRnull_genes)
SDRnull_selection_super <- SDRnull_all_super[SDRnull_genes$gene, ]
View(SDRnull_all_super)
intersect_genes_test <- [SDRnull_genes, SDRnull_all_sub$gene]
intersect_genes_test <- intersect(SDRnull_genes, SDRnull_all_sub$gene)
intersect_genes_test <- intersect(SDRnull_genes$gene, SDRnull_all_sub$gene)
S <- cards()
import dplyr
library(dplyr)
dplyr::filter(SDRnull_all_sub, SDRnull_all_sub$gene %in% gene_selection_df)
test <- dplyr::filter(SDRnull_all_sub, SDRnull_all_sub$gene %in% gene_selection_df)
View(test)
test <- dplyr::filter(all_genes, all_genes$gene %in% gene_selection_df)
View(test)
all_genes
gene_selection_df
test <- dplyr::filter(all_genes, all_genes$gene %in% gene_selection_vector)
test
SDRnull_selection_super <- dplyr::filter(SDRnull_all_super, SDRnull_all_super$gene %in% SDRnull_genes$gene)
View(SDRnull_selection_super)
max(SDRnull_selection_super$gene)
max(table(SDRnull_selection_super$gene))
SDRnull_selection_sub <- dplyr::filter(SDRnull_all_sub, SDRnull_all_sub$gene %in% SDRnull_genes$gene)
max(SDRnull_selection_super$gene)
max(table(SDRnull_selection_super$gene))
table(SDRnull_selection_super$gene)
# Read all SDRnull data
SDRnull_all_super <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSuper_22.07.21.csv")
SDRnull_all_sub <- read.csv("C:/Users/norab/Master/data/SDRnull/all/SDRnullTotalSub_22.07.21.csv")
# Read list of relevant genes
SDRnull_genes <- read.csv("C:/Users/norab/Master/data/SDRnull/other/SDRnull_gene_selection.csv")
colnames(SDRnull_genes) <- c("gene")
# Extract SDRnull data for selected genes
# Info
gene_nr <- table(SDRnull_all_super['gene'])
max(gene_nr)
# Get generated SDRnull for selected genes only
SDRnull_selection_super <- dplyr::filter(SDRnull_all_super, SDRnull_all_super$gene %in% SDRnull_genes$gene)
SDRnull_selection_sub <- dplyr::filter(SDRnull_all_sub, SDRnull_all_sub$gene %in% SDRnull_genes$gene)
table(SDRnull_selection_super$gene)
table(SDRnull_selection_super$gene)
SDRnull_selection_super_SDHA <- SDRnull_selection_super[SDRnull_selection_super$gene == 'ENSG00000073578___SDHA']
View(SDRnull_selection_super)
SDRnull_selection_super$gene
SDRnull_selection_super_SDHA <- SDRnull_selection_super[SDRnull_selection_super$gene == 'ENSG00000073578___SDHA']]
SDRnull_selection_super_SDHA <- SDRnull_selection_super[SDRnull_selection_super$gene == 'ENSG00000073578___SDHA']
SDRnull_selection_super %>% group_by(gene)
SDRnull_selection_super %>% table()
SDRnull_selection_super$gene %>% table()
View(SDRnull_selection_sub)
# Next: filter genes with more than
CFAH_example <- filter(SDRnull_selection_super$gene == "ENSG00000000971___CFAH")
# Next: filter genes with more than
CFAH_example <- SDRnull_selection_super(SDRnull_selection_super$gene == "ENSG00000000971___CFAH"))
# Next: filter genes with more than
CFAH_example <- SDRnull_selection_super[SDRnull_selection_super$gene == "ENSG00000000971___CFAH")]
# Next: filter genes with more than
CFAH_example <- SDRnull_selection_super[SDRnull_selection_super$gene == "ENSG00000000971___CFAH"]
SDRnull_selection_super$gene == "ENSG00000000971___CFAH"
# Next: filter genes with more than
CFAH_example <- SDRnull_selection_super$gene[SDRnull_selection_super$gene == "ENSG00000000971___CFAH"]
# Next: filter genes with more than
CFAH_example <- filter(SDRnull_selection_super, gene == "ENSG00000000971___CFAH)
# Next: filter genes with more than
CFAH_example <- filter(SDRnull_selection_super, gene == "ENSG00000000971___CFAH")
# Next: filter genes with more than
CFAH_example <- filter(SDRnull_selection_super, gene == "ENSG00000000971___CFAH")
View(CFAH_example)
#SDRnull_values = []         # Numerical vector of nullSDR values for gene
P = ecdf(CFAH_example$SDRnull)    # The function giving empirical CDF of SDRnull_values
p_val = P(SDRtrue)          # Returns empirical CDF at SDRtrue, ie. calculated SDR for populations
# Load SDRs for population groups
read.csv("C:/Users/norab/Master/data/SDR/all/SDRsuper_all.csv", header = TRUE)
# Load SDRs for population groups
SDRsuper <- read.csv("C:/Users/norab/Master/data/SDR/SDRsuper_all.csv", header = TRUE)
SDRsub <- read.csv("C:/Users/norab/Master/data/SDR/SDRsub_all.csv", header = TRUE)
SDR_CFAH <- filter(SDRsuper, gene == "ENSG00000000971___CFAH")
View(SDR_CFAH)
p_val = P(SDR_CFAH$SDR)          # Returns empirical CDF at SDRtrue, ie. calculated SDR for populations
#SDRnull_values = []         # Numerical vector of nullSDR values for gene
P_CFAH = ecdf(CFAH_example$SDRnull)    # The function giving empirical CDF of SDRnull_values
#SDRnull_values = []         # Numerical vector of nullSDR values for gene
P_CFAH = ecdf(CFAH_example$SDRnull)    # The function giving empirical CDF of SDRnull_values
p_val_CFAH = P_CFAH(SDR_CFAH$SDR)          # Returns empirical CDF at SDRtrue, ie. calculated SDR for populations
# Save p val for next step - multiple testing correcting
plot(P_CFAH)                     # Plot the shit (dont do for all, make an example or two...)
p_val_CFAH
# Save p val for next step - multiple testing correcting
plot(P_CFAH)                     # Plot the shit (dont do for all, make an example or two...)
CFAH_example$SDRnull
SDR_CFAH$SDR
H
# Save p val for next step - multiple testing correcting
plot(P_CFAH)                     # Plot the shit (dont do for all, make an example or two...)
num_perm_samples = 273      # 70 = empirical p val = 0.1
var_p_n = var_p / num_perm_samples
sd_p_n = sqrt(var_p_n)
# 0.025 quantile
low_q = max(0, (prob-1.96*sd_p_n))
# 0.0975 quantile of true empirical p-val
high_q = prob + 1.96 * sd_p_n
print(low_q)
print(high_q)
